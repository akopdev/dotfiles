#!/usr/bin/env bash

if [ $# -lt 1 ]; then
cat << HELP
 _____        _    __ _ _           
|  __ \      | |  / _(_) |          
| |  | | ___ | |_| |_ _| | ___  ___ 
| |  | |/ _ \| __|  _| | |/ _ \/ __|
| |__| | (_) | |_| | | | |  __/\__ \ 
|_____/ \___/ \__|_| |_|_|\___||___/

by Akop Kesheshyan

Usage: dotfiles [command]

Commands:
    update    Update all installed packages
    open      Open project in editor
    remove    Backup existing setup and then remove config files. Packages will be remained

HELP
return 
fi

###################################################################################################
# Prepare environment 
###################################################################################################

DOTFILES="${HOME}/.dotfiles"
GREEN='\033[1;32m'
RED='\033[1;31m'
RESET='\033[0m'
YELLOW='\033[1;33m'

###################################################################################################
# Utils
###################################################################################################

info() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_INFO ]]; then
    echo -e "${GREEN}[+]${RESET} $*" 1>&2
  fi
}

warn() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_WARNING ]]; then
    echo -e "${YELLOW}[!]${RESET} $*" 1>&2
  fi
}

error() {
  if [[ $LOG_LEVEL -ge $LOG_LEVEL_ERROR ]]; then
    echo -e "${RED}[X]${RESET} $*" 1>&2
  fi
}


link_dir() {
  if [ ! -d "${HOME}/.config/${1}" ]; then
    ln -s "${DOTFILES}/${1}" "${HOME}/.config/${1}"
  fi
}

link_file() {
  local folder_name="${1%%/*}"
  local file_name="${1#"${folder_name}/"}"
  if [ ! -f "${HOME}/${file_name}" ]; then
    ln -s "${DOTFILES}/${1}" "${HOME}/${file_name}"
  fi
}

###################################################################################################
# Configuring installed apps to use dotfiles configs
###################################################################################################

_post_install_setup() {
  # create a private gitconfig in user folder
  if [[ ! -f "${HOME}/.gitconfig.local" ]]; then
    cp "${DOTFILES}/git/gitconfig.local.example" "${HOME}/.gitconfig.local"
  fi

  # create Go folders if required
  if [[ ! -d "${HOME}/go" ]]; then
      mkdir -p "${HOME}"/go/{bin,src,pkg}
  fi

  # Place config files in proper places. We use .config for folders
  link_dir "bat"
  link_dir "nvim"
  link_dir "pgcli"
  link_file "git/.gitconfig"
  link_file "tmux/.tmux.conf"
  link_file "zsh/.zshrc"
  link_file "wezterm/.wezterm.lua"
}

###################################################################################################
# Update all installed packages
###################################################################################################

_update() {
  # Should not be a root user
  if [[ $(id -u) == 0 ]]; then
    error "Don't run this as root!"
    return 1
  fi

  # Check if dotfiles exists
  if [[ ! -d "${DOTFILES}" ]]; then
    error "'${DOTFILES}' not found. Please, run install.sh first!"
    return 1
  fi

  info "Pull latest version of dotfiles"
  cd "${DOTFILES}" && git pull

  info "Updating system packages"
  OS="$(uname)"
  if [[ "${OS}" == "Linux" ]]; then
    sudo apt-get update && sudo apt-get -y upgrade
  fi

  brew update
  brew upgrade
  brew bundle
  brew cleanup

  info "Setting up local environment"
  _post_install_setup

  info "Update was successfully completed!"
}

###################################################################################################
# Open dotfiles in editor 
###################################################################################################

_open() {
  cd "${ZSH}" && ${EDITOR} ./nvim/init.lua
}

###################################################################################################
# Entrypoint 
###################################################################################################

_main() {
  if [[ "${1:-}" =~ ^update$ ]]
  then
    _update "$@"
  elif [[ "${1:-}" =~ ^open$ ]]; then
    _open
  fi
}

_main "$@"
